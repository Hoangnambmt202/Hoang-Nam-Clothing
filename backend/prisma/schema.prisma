generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  passwordHash  String
  role          Role           @default(CUSTOMER)
  addresses     Address[]
  carts         Cart[]
  orders        Order[]
  wishlist      WishlistItem[]
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  ip        String?
  ua        String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Category {
  id       String     @id @default(cuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String?
  brand         String?
  status        ProductStatus  @default(ACTIVE)
  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id])
  variants      Variant[]
  images        ProductImage[]
  wishlistItems WishlistItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum ProductStatus {
  ACTIVE
  HIDDEN
  ARCHIVED
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Variant {
  id         String      @id @default(cuid())
  productId  String
  sku        String      @unique
  color      String?
  size       String?
  price      Decimal     @db.Decimal(10, 2)
  compareAt  Decimal?    @db.Decimal(10, 2)
  weightGram Int?
  inventory  Inventory?
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([productId])
}

model Inventory {
  id         String  @id @default(cuid())
  variantId  String  @unique
  quantity   Int     @default(0)
  reserved   Int     @default(0)
  lowStockAt Int? // threshold
  variant    Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  variantId String
  qty       Int     @default(1)
  unitPrice Decimal @db.Decimal(10, 2)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant   Variant @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([variantId])
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  district  String
  ward      String
  country   String  @default("VN")
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
}

model Order {
  id        String        @id @default(cuid())
  userId    String
  addressId String
  status    OrderStatus   @default(PENDING)
  payment   PaymentStatus @default(UNPAID)
  subTotal  Decimal       @db.Decimal(10, 2)
  shipping  Decimal       @db.Decimal(10, 2)
  total     Decimal       @db.Decimal(10, 2)
  items     OrderItem[]
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  address   Address       @relation(fields: [addressId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  qty       Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant   Variant @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([variantId])
}

model WishlistItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}
